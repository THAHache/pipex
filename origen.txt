DOCUMENTACIÓN PARA PIPEX

Funciones permitidas:
open, close, read, write,
malloc, free, perror,
strerror, access, dup, dup2,
execve, exit, fork, pipe,
unlink, wait, waitpid

con execve se ejecutan los comandos del sistema

Si a un fichero se le deniega el permiso (la función intentada  execve  devuelve  EACCES),
       estas  funciones  continuarán  buscando  en  el  resto  del  camino  de búsqueda. Si no se
       encuentra otro fichero, empero, retornarán dando el valor  EACCES  a  la  variable  global
       errno .
Si  no  se  reconoce  la  cabecera  de  un  fichero  (la función intentada execve devuelve
       ENOEXEC), estas funciones ejecutarán el shell con el camino del  fichero  como  su  primer
       argumento. (Si este intento falla, no se busca más.)
Todas estas funciones pueden fallar y dar un valor a errno para cualquiera de los  errores
       especificados para la función execve(2).
hay que poner la ruta donde se encuentran los comandos. ej: "/bin/grep"

execve()  ejecuta  el  programa  indicado por filename.
       El intérprete debe ser un nombre de camino válido para un ejecutable que no sea él mismo un guión y que será ejecutado como intérprete [arg] filename.
       * Sintaxis => int execve (const char *filename, const char *argv [], const char *envp[]);





fork() para obtener el id del proceso?
wait primo del fork?

dup2(fdsrc, fddst); clona el primer df en el segundo. Hay que ir cerrando los fd que se abran

pipe(fd1);

La función access en C se utiliza para verificar si un proceso tiene permisos de acceso a un archivo o directorio. Su prototipo es el siguiente:
              int access(const char *path, int mode);
       path: Es una cadena que representa la ruta al archivo o directorio que se quiere verificar.
       mode: Es un entero que especifica los permisos que se quieren verificar.
       Puede tomar valores como R_OK (lectura), W_OK (escritura), X_OK (ejecución) y F_OK (existencia del archivo/directorio).
       La función devuelve 0 si el acceso se permite según los permisos especificados y -1 si hay un error. En caso de error, se puede consultar la variable errno para obtener más detalles sobre el problema.

La llamada al sistema unlink elimina la entrada al directorio de un archivo y reduce los enlaces del mismo.
       Envía 0 si la desvinculación fue correcta, y -1 si hubo error.
       Debe tener permisos de escritura y de ejecución en el directorio en el cual tiene el archivo su entrada de directorio para que esta llamada funcione:
              int unlink(const char *path)


Funcionamiento:

< Eleccion del archivo de origen

> Guardar en el archivo destino



Ejemplos:
< origen.txt ls -l | wc -l > dst.txt
< origen.txt grep a1 | wc -w > dst.txt
./pipex origen.txt "grep a1" "wc -l" dst.txt

Aclaraciones
grep busca en el archivo la cadena que se le pasa como argumento, en este caso sería a1
El pipeline aplica la salida del primer comando al segundo
wc es un contador. la flag -w se cuentan las palabras y con -l se cuentan las líneas.

whiletruethendream canal de yt para ver las cosas estas
